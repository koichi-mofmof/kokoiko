name: テスト実行

on:
  push:
    branches: [develop]
  pull_request:
    branches: [develop]
  workflow_dispatch:

jobs:
  unit-test:
    name: ユニットテスト
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node-version }} のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 依存関係のインストール
        run: npm ci

      - name: jqのインストール
        run: sudo apt-get install jq bc

      - name: 環境変数ファイルの作成
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.local

      - name: ユニットテストの実行
        run: npm test -- --testPathIgnorePatterns="integration|e2e"

      - name: ユニットテストカバレッジレポートの生成
        run: npm test -- --testPathIgnorePatterns="integration|e2e" --coverage

      - name: テストカバレッジレポートの表示
        run: |
          echo "ユニットテスト - カバレッジサマリー:"
          cat coverage/coverage-summary.json | jq -r '.total | "\n - ステートメント: \(.statements.pct)%\n - ブランチ: \(.branches.pct)%\n - 関数: \(.functions.pct)%\n - 行: \(.lines.pct)%"'

      - name: テストカバレッジレポートのアップロード
        uses: actions/upload-artifact@v3
        with:
          name: unit-coverage-report
          path: coverage/
          retention-days: 7

  integration-test:
    name: 結合テスト
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node-version }} のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 依存関係のインストール
        run: npm ci

      - name: jqのインストール
        run: sudo apt-get install jq

      - name: 環境変数ファイルの作成
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.local

      - name: 結合テストの実行
        run: npm test -- --testMatch="**/*Integration.test.js"

      - name: 結合テストカバレッジレポートの生成
        run: npm test -- --testMatch="**/*Integration.test.js" --coverage

      - name: テストカバレッジレポートの表示
        run: |
          echo "結合テスト - カバレッジサマリー:"
          cat coverage/coverage-summary.json | jq -r '.total | "\n - ステートメント: \(.statements.pct)%\n - ブランチ: \(.branches.pct)%\n - 関数: \(.functions.pct)%\n - 行: \(.lines.pct)%"'

      - name: テストカバレッジレポートのアップロード
        uses: actions/upload-artifact@v3
        with:
          name: integration-coverage-report
          path: coverage/
          retention-days: 7

  lint:
    name: リント
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - name: Node.js ${{ matrix.node-version }} のセットアップ
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: 依存関係のインストール
        run: npm ci

      - name: jqのインストール
        run: sudo apt-get install jq

      - name: 環境変数ファイルの作成
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.local

      - name: リントの実行
        run: npm run lint

  all-tests:
    name: すべてのテスト
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test, lint]

    steps:
      - uses: actions/checkout@v3

      - name: Node.js セットアップ
        uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "npm"

      - name: 依存関係のインストール
        run: npm ci

      - name: jqのインストール
        run: sudo apt-get install jq

      - name: 環境変数ファイルの作成
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_URL }}" > .env.local
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" >> .env.local

      - name: すべてのテストの実行とカバレッジレポート生成
        run: npm test -- --coverage

      - name: テストカバレッジレポートの表示
        run: |
          echo "全体テスト - カバレッジサマリー:"
          cat coverage/coverage-summary.json | jq -r '.total | "\n - ステートメント: \(.statements.pct)%\n - ブランチ: \(.branches.pct)%\n - 関数: \(.functions.pct)%\n - 行: \(.lines.pct)%"'

      - name: テストカバレッジレポートのアップロード
        uses: actions/upload-artifact@v3
        with:
          name: all-coverage-report
          path: coverage/
          retention-days: 7

      - name: カバレッジチェック
        run: |
          STATEMENTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct')
          BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct')
          FUNCTIONS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct')
          LINES=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct')

          THRESHOLD=50

          echo "カバレッジ閾値: ${THRESHOLD}%"
          echo "現在のカバレッジ:"
          echo " - ステートメント: ${STATEMENTS}%"
          echo " - ブランチ: ${BRANCHES}%"
          echo " - 関数: ${FUNCTIONS}%"
          echo " - 行: ${LINES}%"

          if (( $(echo "$STATEMENTS < $THRESHOLD" | bc -l) )) || \
             (( $(echo "$BRANCHES < $THRESHOLD" | bc -l) )) || \
             (( $(echo "$FUNCTIONS < $THRESHOLD" | bc -l) )) || \
             (( $(echo "$LINES < $THRESHOLD" | bc -l) )); then
            echo "警告: テストカバレッジが目標値を下回っています。"
            echo "目標値: ${THRESHOLD}%"
          else
            echo "成功: すべてのカバレッジ指標が目標値を達成しています。"
          fi
